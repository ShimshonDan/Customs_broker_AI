# bot.py
import os
import asyncio
from io import BytesIO
from pathlib import Path
from typing import List, Dict, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

from request_2_ppx import (
    extract_from_pdf_file, validate_result, build_dt_text, classify_items_eaeu,
    invoice, package_list, cmr, agreement
)

load_dotenv()

# -------- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ --------
DOCS_DIR = Path("./docs")
DOCS_DIR.mkdir(parents=True, exist_ok=True)
TOKEN = os.environ.get("TELEGRAM_TOKEN")

UD_RESULT_TEXT = "result_text"

# -------- utils --------
def list_pdfs() -> List[Path]:
    return sorted([p for p in DOCS_DIR.iterdir() if p.suffix.lower() == ".pdf"])

def pick_first_four(pdfs: List[Path]) -> List[Path]:
    return pdfs[:4]

async def send_docs(paths: List[Path], update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    for p in paths:
        with p.open("rb") as f:
            await context.bot.send_document(chat_id=chat_id, document=InputFile(f, filename=p.name))

def detect_required_docs(pdfs: List[Path]) -> Dict[str, Optional[Path]]:
    found = {"invoice": None, "pl": None, "cmr": None, "agreement": None}
    for p in pdfs:
        n = p.name.lower()
        if any(k in n for k in ["inv", "invoice"]):
            found["invoice"] = found["invoice"] or p
        elif any(k in n for k in ["pack", "packing", "pl"]):
            found["pl"] = found["pl"] or p
        elif "cmr" in n:
            found["cmr"] = found["cmr"] or p
        elif any(k in n for k in ["dogovor", "agreement", "contract", "ved-dogovor"]):
            found["agreement"] = found["agreement"] or p
    return found

async def run_full_pipeline_async(docs: Dict[str, Path]) -> str:
    def _run_sync() -> str:
        invoice_json = extract_from_pdf_file(str(docs["invoice"]), invoice.INVOICE_INSTRUCTION_RU, invoice.INVOICE_SCHEMA)
        validate_result(invoice_json, invoice.INVOICE_SCHEMA)

        pl_json      = extract_from_pdf_file(str(docs["pl"]), package_list.PL_INSTRUCTION_RU, package_list.PACKING_LIST_SCHEMA)
        validate_result(pl_json, package_list.PACKING_LIST_SCHEMA)

        cmr_json     = extract_from_pdf_file(str(docs["cmr"]), cmr.CMR_INSTRUCTION_RU, cmr.CMR_SCHEMA)
        validate_result(cmr_json, cmr.CMR_SCHEMA)

        ag_json      = extract_from_pdf_file(str(docs["agreement"]), agreement.AGREEMENT_INSTRUCTION_RU, agreement.AGREEMENT_SCHEMA)
        validate_result(ag_json, agreement.AGREEMENT_SCHEMA)

        dt_text = build_dt_text(invoice_json, pl_json, cmr_json, ag_json)

        hs_results = classify_items_eaeu(invoice_json, pl_json)
        lines = []
        for r in hs_results:
            if "error" in r:
                lines.append(f"[33] –ü–æ–∑–∏—Ü–∏—è {r['line_index']}: –æ—à–∏–±–∫–∞ ‚Äî {r['error']}\n")
                continue
            lines.append(f"[33] –ü–æ–∑–∏—Ü–∏—è {r['line_index']}: –∫–æ–¥ –¢–ù –í–≠–î –ï–ê–≠–° {r['eaeu_hs_code']} (–¥–æ–≤–µ—Ä–∏–µ {r.get('confidence')})")
            for s in r.get("explanations") or []:
                lines.append(f"  - {s}")
            if r.get("candidate_codes"):
                lines.append("  –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:")
                for c in r["candidate_codes"]:
                    lines.append(f"    ‚Ä¢ {c['code']}: {c['why_not']}")
            if r.get("evidence_urls"):
                lines.append("  –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                for url in r["evidence_urls"]:
                    lines.append(f"    - {url}")
            lines.append("")
        hs_text = "\n".join(lines).rstrip()

        combined = (
            "–ü–æ–ª–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ | –í—Å—Ç–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Ç—Å:\n"
            f"{dt_text}\n\n"
            "=====================\n"
            "–¢–æ–≤–∞—Ä | –¢–ù –í–≠–î:\n"
            f"{hs_text}\n\n"
            "–í–∞–∂–Ω–æ: —ç—Ç–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –Ω–µ –±–æ–ª–µ–µ; –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º."
        )
        return combined

    return await asyncio.to_thread(_run_sync)

# -------- UI --------
def main_menu_text() -> str:
    return (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–µ—Ä–µ–¥ –≤–∞–º–∏ MVP AI-—Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ –±—Ä–æ–∫–µ—Ä–∞.\n"
        "–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
        "‚Äî –î–æ–≥–æ–≤–æ—Ä\n"
        "‚Äî –ò–Ω–≤–æ–π—Å\n"
        "‚Äî –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è (CMR)\n"
        "‚Äî –£–ø–∞–∫–æ–≤–æ—á–Ω—ã–π –ª–∏—Å—Ç\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É."
    )

def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="upload")]])

def export_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ TXT", callback_data="export_txt")],
        [InlineKeyboardButton("üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç", callback_data="export_chat")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

async def back_to_menu_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=main_menu_text(), reply_markup=main_menu_kb())

# -------- —Ö—ç–Ω–¥–ª–µ—Ä—ã --------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(main_menu_text(), reply_markup=main_menu_kb())

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    except Exception:
        pass

    if query.data == "upload":
        pdfs = list_pdfs()
        if len(pdfs) < 4:
            await query.message.reply_text(
                f"–í –ø–∞–ø–∫–µ ./docs –Ω–∞–π–¥–µ–Ω–æ {len(pdfs)} PDF-—Ñ–∞–π–ª–æ–≤. "
                "–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 4 —Ñ–∞–π–ª–∞: –¥–æ–≥–æ–≤–æ—Ä, –∏–Ω–≤–æ–π—Å, CMR –∏ —É–ø–∞–∫–æ–≤–æ—á–Ω—ã–π –ª–∏—Å—Ç.",
                reply_markup=main_menu_kb()
            )
            return

        four = pick_first_four(pdfs)
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª—è—é 4 PDF‚Ä¶")
        await send_docs(four, update, context)

        roles = detect_required_docs(four)
        missing_roles = [k for k, v in roles.items() if v is None]
        if missing_roles:
            await query.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "
                "invoice/inv, packing/pack/pl, cmr, agreement/contract/dogovor.",
                reply_markup=main_menu_kb()
            )
            return

        await query.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤‚Ä¶")
        try:
            combined_text = await run_full_pipeline_async(roles)
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", reply_markup=main_menu_kb())
            return

        # --- –í–ê–ñ–ù–û: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç —Å—Ä–∞–∑—É ---
        context.user_data[UD_RESULT_TEXT] = combined_text
        await query.message.reply_text(  # <- –Ω–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            "–û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:",
            reply_markup=export_menu_kb()
        )
        return

    if query.data == "export_txt":
        combined_text = context.user_data.get(UD_RESULT_TEXT)
        if not combined_text:
            await query.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
            return
        bio = BytesIO(combined_text.encode("utf-8"))
        bio.name = "dt_mapping__hs_classification.txt"
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=bio,
            caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (TXT)."
        )
        await query.message.reply_text("–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]))
        return

    if query.data == "export_chat":
        combined_text = context.user_data.get(UD_RESULT_TEXT)
        if not combined_text:
            await query.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())
            return
        MAX_LEN = 4000
        if len(combined_text) <= MAX_LEN:
            await query.message.reply_text(combined_text)
        else:
            chunk, size = [], 0
            for line in combined_text.splitlines(True):
                if size + len(line) > MAX_LEN:
                    await query.message.reply_text("".join(chunk))
                    chunk, size = [], 0
                chunk.append(line)
                size += len(line)
            if chunk:
                await query.message.reply_text("".join(chunk))
        await query.message.reply_text("–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]))
        return

    if query.data == "back_to_menu":
        await back_to_menu_prompt(update, context)
        return

def main():
    if not TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_callback))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
